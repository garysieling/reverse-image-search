{
  "paragraphs": [
    {
      "text": "%python\n\nprint(\"%html \u003ciframe width\u003d\\\"560\\\" height\u003d\\\"315\\\" src\u003d\\\"https://www.youtube.com/embed/YJ4d-nOf7cI\\\" frameborder\u003d\\\"0\\\" allow\u003d\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen\u003e\u003c/iframe\u003e\")",
      "user": "anonymous",
      "dateUpdated": "2019-05-26 10:59:13.111",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ciframe width\u003d\"560\" height\u003d\"315\" src\u003d\"https://www.youtube.com/embed/YJ4d-nOf7cI\" frameborder\u003d\"0\" allow\u003d\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557596091749_1807103934",
      "id": "20190511-173451_266082222",
      "dateCreated": "2019-05-11 17:34:51.749",
      "dateStarted": "2019-05-26 10:59:13.250",
      "dateFinished": "2019-05-26 10:59:13.261",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\nyoutube-dl -F  \"https://www.youtube.com/watch?v\u003dYJ4d-nOf7cI\"",
      "user": "anonymous",
      "dateUpdated": "2019-05-26 10:59:13.349",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[youtube] YJ4d-nOf7cI: Downloading webpage\n[youtube] YJ4d-nOf7cI: Downloading video info webpage\n[youtube] YJ4d-nOf7cI: Downloading MPD manifest\n[info] Available formats for YJ4d-nOf7cI:\nformat code  extension  resolution note\n139          m4a        audio only DASH audio   49k , m4a_dash container, mp4a.40.5@ 48k (22050Hz)\n140          m4a        audio only DASH audio   98k , m4a_dash container, mp4a.40.2@128k (44100Hz)\n278          webm       82x144     DASH video   95k , webm_dash container, vp9, 30fps, video only\n160          mp4        82x144     DASH video  108k , mp4_dash container, avc1.4d400b, 30fps, video only\n134          mp4        202x360    DASH video  184k , mp4_dash container, avc1.4d400d, 30fps, video only\n242          webm       136x240    DASH video  220k , webm_dash container, vp9, 30fps, video only\n133          mp4        136x240    DASH video  242k , mp4_dash container, avc1.4d400c, 30fps, video only\n243          webm       202x360    DASH video  405k , webm_dash container, vp9, 30fps, video only\n244          webm       270x480    DASH video  752k , webm_dash container, vp9, 30fps, video only\n135          mp4        270x480    DASH video 1155k , mp4_dash container, avc1.4d4014, 30fps, video only\n137          mp4        608x1080   DASH video 1451k , mp4_dash container, avc1.64001f, 30fps, video only\n247          webm       406x720    DASH video 1505k , webm_dash container, vp9, 30fps, video only\n136          mp4        406x720    DASH video 2310k , mp4_dash container, avc1.4d4016, 30fps, video only\n248          webm       608x1080   DASH video 2646k , webm_dash container, vp9, 30fps, video only\n18           mp4        202x360    small , avc1.42001E, mp4a.40.2@ 96k, 337.37KiB\n22           mp4        406x720    medium , avc1.64001F, mp4a.40.2@192k\n43           webm       640x360    medium , vp8.0, vorbis@128k, 299.98KiB (best)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557596693846_-1726658262",
      "id": "20190511-174453_648959556",
      "dateCreated": "2019-05-11 17:44:53.846",
      "dateStarted": "2019-05-26 10:59:13.601",
      "dateFinished": "2019-05-26 10:59:21.569",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nroot \u003d \"/data/household/images/\"\nl\u003dlen(root)\n#tags\u003d[(x[0][l:],x[0][l:]) for x in os.walk(root) if len(x[0]) !\u003d len(root)]\n\n#tag \u003d z.select(\"tag\", tags)\n\nimport os, os.path\n\n# simple version for working with CWD\nprint(\"%table \" + \"tag\\tcount\\n\")\n\nfor tag_path in os.walk(root):\n    if len(tag_path[0]) !\u003d len(root):\n        print(tag_path[0][l:] + \"\\t\" + str(len([name for name in os.listdir(tag_path[0]) if os.path.isfile(os.path.join(tag_path[0], name))])))\n        \n        print(\"\\n\")\n\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-26 11:33:39.546",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": true,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "tag",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "count",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 0.0,
                          "direction": "desc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "tag": "string",
                      "count": "number"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "tag",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "runOnSelectionChange": true
      },
      "settings": {
        "params": {
          "day": "/data/household/images/sump_pump",
          "tag": "washer"
        },
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "tag\tcount\nsump_pump\t144\nwasher\t161\nbreaker_box\t78\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1558868583617_-874024789",
      "id": "20190526-110303_1714860406",
      "dateCreated": "2019-05-26 11:03:03.618",
      "dateStarted": "2019-05-26 11:33:37.956",
      "dateFinished": "2019-05-26 11:33:38.732",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\nyoutube-dl -f 135 -o \"/data/sump_pump.mp4\" \"https://www.youtube.com/watch?v\u003dYJ4d-nOf7cI\"\nyoutube-dl -f 135 -o \"/data/breaker_box.mp4\" \"https://www.youtube.com/watch?v\u003deYzj9hty1Q4\"\nyoutube-dl -f 135 -o \"/data/washer.mp4\" \"https://www.youtube.com/watch?v\u003d0_1xQLGeGl8\"\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-26 10:59:21.635",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[youtube] YJ4d-nOf7cI: Downloading webpage\n[youtube] YJ4d-nOf7cI: Downloading video info webpage\n[youtube] YJ4d-nOf7cI: Downloading MPD manifest\n[download] /data/sump_pump.mp4 has already been downloaded\n\r[download] 100% of 209.39KiB\n[youtube] eYzj9hty1Q4: Downloading webpage\n[youtube] eYzj9hty1Q4: Downloading video info webpage\n[youtube] eYzj9hty1Q4: Downloading MPD manifest\n[download] /data/breaker_box.mp4 has already been downloaded\n\r[download] 100% of 128.01KiB\n[youtube] 0_1xQLGeGl8: Downloading webpage\n[youtube] 0_1xQLGeGl8: Downloading video info webpage\n[youtube] 0_1xQLGeGl8: Downloading MPD manifest\n[download] /data/washer.mp4 has already been downloaded\n\r[download] 100% of 225.87KiB\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557596235326_1641246691",
      "id": "20190511-173715_846909079",
      "dateCreated": "2019-05-11 17:37:15.326",
      "dateStarted": "2019-05-26 10:59:22.199",
      "dateFinished": "2019-05-26 10:59:28.105",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\nffmpeg -i /data/sump_pump.mp4 /data/household/sump_pump/YJ4d-nOf7cI-%04d.jpg -hide_banner\nffmpeg -i /data/breaker_box.mp4 /data/household/breaker_box/eYzj9hty1Q4-%04d.jpg -hide_banner\nffmpeg -i /data/washer.mp4 /data/household/washer/0_1xQLGeGl8-%04d.jpg -hide_banner\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-26 10:59:28.114",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Input #0, mov,mp4,m4a,3gp,3g2,mj2, from \u0027/data/sump_pump.mp4\u0027:\n  Metadata:\n    major_brand     : dash\n    minor_version   : 0\n    compatible_brands: iso6avc1mp41\n    creation_time   : 2019-05-11 17:37:14\n  Duration: 00:00:04.83, start: 0.000000, bitrate: 354 kb/s\n    Stream #0:0(und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p, 270x480 [SAR 1:1 DAR 9:16], 350 kb/s, 29.80 fps, 29.83 tbr, 90k tbn, 59.60 tbc (default)\n    Metadata:\n      creation_time   : 2019-05-11 17:37:14\n      handler_name    : ISO Media file produced by Google Inc. Created on: 05/11/2019.\n[swscaler @ 0x17c7a20] deprecated pixel format used, make sure you did set range correctly\nOutput #0, image2, to \u0027/data/household/sump_pump/YJ4d-nOf7cI-%04d.jpg\u0027:\n  Metadata:\n    major_brand     : dash\n    minor_version   : 0\n    compatible_brands: iso6avc1mp41\n    encoder         : Lavf56.40.101\n    Stream #0:0(und): Video: mjpeg, yuvj420p(pc), 270x480 [SAR 1:1 DAR 9:16], q\u003d2-31, 200 kb/s, 29.83 fps, 29.83 tbn, 29.83 tbc (default)\n    Metadata:\n      creation_time   : 2019-05-11 17:37:14\n      handler_name    : ISO Media file produced by Google Inc. Created on: 05/11/2019.\n      encoder         : Lavc56.60.100 mjpeg\nStream mapping:\n  Stream #0:0 -\u003e #0:0 (h264 (native) -\u003e mjpeg (native))\nPress [q] to stop, [?] for help\n[image2 @ 0x1837240] Could not open file : /data/household/sump_pump/YJ4d-nOf7cI-0001.jpg\nav_interleaved_write_frame(): Input/output error\nframe\u003d    1 fps\u003d0.0 q\u003d4.9 Lsize\u003dN/A time\u003d00:00:00.03 bitrate\u003dN/A    \nvideo:22kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\nConversion failed!\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from \u0027/data/breaker_box.mp4\u0027:\n  Metadata:\n    major_brand     : dash\n    minor_version   : 0\n    compatible_brands: iso6avc1mp41\n    creation_time   : 2019-05-12 17:13:28\n  Duration: 00:00:02.60, start: 0.000000, bitrate: 403 kb/s\n    Stream #0:0(und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p, 270x480 [SAR 1:1 DAR 9:16], 398 kb/s, 30 fps, 30 tbr, 90k tbn, 60 tbc (default)\n    Metadata:\n      creation_time   : 2019-05-12 17:13:28\n      handler_name    : ISO Media file produced by Google Inc. Created on: 05/12/2019.\n[swscaler @ 0x17c1a20] deprecated pixel format used, make sure you did set range correctly\nOutput #0, image2, to \u0027/data/household/breaker_box/eYzj9hty1Q4-%04d.jpg\u0027:\n  Metadata:\n    major_brand     : dash\n    minor_version   : 0\n    compatible_brands: iso6avc1mp41\n    encoder         : Lavf56.40.101\n    Stream #0:0(und): Video: mjpeg, yuvj420p(pc), 270x480 [SAR 1:1 DAR 9:16], q\u003d2-31, 200 kb/s, 30 fps, 30 tbn, 30 tbc (default)\n    Metadata:\n      creation_time   : 2019-05-12 17:13:28\n      handler_name    : ISO Media file produced by Google Inc. Created on: 05/12/2019.\n      encoder         : Lavc56.60.100 mjpeg\nStream mapping:\n  Stream #0:0 -\u003e #0:0 (h264 (native) -\u003e mjpeg (native))\nPress [q] to stop, [?] for help\n[image2 @ 0x1824ec0] Could not open file : /data/household/breaker_box/eYzj9hty1Q4-0001.jpg\nav_interleaved_write_frame(): Input/output error\nframe\u003d    1 fps\u003d0.0 q\u003d5.1 Lsize\u003dN/A time\u003d00:00:00.03 bitrate\u003dN/A    \nvideo:17kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\nConversion failed!\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from \u0027/data/washer.mp4\u0027:\n  Metadata:\n    major_brand     : dash\n    minor_version   : 0\n    compatible_brands: iso6avc1mp41\n    creation_time   : 2019-05-12 17:12:33\n  Duration: 00:00:05.37, start: 0.000000, bitrate: 344 kb/s\n    Stream #0:0(und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p, 270x480 [SAR 1:1 DAR 9:16], 341 kb/s, 30 fps, 30 tbr, 90k tbn, 60 tbc (default)\n    Metadata:\n      creation_time   : 2019-05-12 17:12:33\n      handler_name    : ISO Media file produced by Google Inc. Created on: 05/12/2019.\n[swscaler @ 0x131ba20] deprecated pixel format used, make sure you did set range correctly\nOutput #0, image2, to \u0027/data/household/washer/0_1xQLGeGl8-%04d.jpg\u0027:\n  Metadata:\n    major_brand     : dash\n    minor_version   : 0\n    compatible_brands: iso6avc1mp41\n    encoder         : Lavf56.40.101\n    Stream #0:0(und): Video: mjpeg, yuvj420p(pc), 270x480 [SAR 1:1 DAR 9:16], q\u003d2-31, 200 kb/s, 30 fps, 30 tbn, 30 tbc (default)\n    Metadata:\n      creation_time   : 2019-05-12 17:12:33\n      handler_name    : ISO Media file produced by Google Inc. Created on: 05/12/2019.\n      encoder         : Lavc56.60.100 mjpeg\nStream mapping:\n  Stream #0:0 -\u003e #0:0 (h264 (native) -\u003e mjpeg (native))\nPress [q] to stop, [?] for help\n[image2 @ 0x134db00] Could not open file : /data/household/washer/0_1xQLGeGl8-0001.jpg\nav_interleaved_write_frame(): Input/output error\nframe\u003d    1 fps\u003d0.0 q\u003d4.3 Lsize\u003dN/A time\u003d00:00:00.03 bitrate\u003dN/A    \nvideo:11kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\nConversion failed!\n"
          },
          {
            "type": "TEXT",
            "data": "ExitValue: 1"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557596132622_-1225904603",
      "id": "20190511-173532_141862231",
      "dateCreated": "2019-05-11 17:35:32.622",
      "dateStarted": "2019-05-26 10:59:28.394",
      "dateFinished": "2019-05-26 10:59:29.302",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "print(\"%html \")\ndef showImage(file: java.io.File) \u003d {\n  import java.io._\n  import java.util._\n  val fis \u003d new FileInputStream(file)\n \n  val data \u003d Array.fill[Byte](file.length.toInt)(0)\n  fis.read(data)\n  fis.close\n \n  val encoded_string \u003d Base64.getEncoder.encodeToString(data)\n  print(\"\u003cimg src\u003d\u0027data:image/jpeg;base64,\" + encoded_string + \"\u0027 style\u003d\u0027float:left;padding:5px;max-height:100px\u0027 /\u003e\")\n}\n\ndef showImages(num: Int) \u003d {\n  import scala.collection.JavaConversions._\n  import java.util.Base64\n  import java.nio.charset.StandardCharsets\n\n  println(\"\u003ch4\u003eImages\u003c/h4\u003e\")\n\n  val files \u003d (new java.io.File(\"/data/images\")).listFiles\n  scala.util.Random.shuffle(files.toList).take(num).map(showImage)\n  \n  {}\n}\n\nshowImages(50)",
      "user": "anonymous",
      "dateUpdated": "2019-05-26 10:59:49.299",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch4\u003eImages\u003c/h4\u003e\njava.io.FileNotFoundException: /data/images/household (Is a directory)\n  at java.io.FileInputStream.open0(Native Method)\n  at java.io.FileInputStream.open(FileInputStream.java:195)\n  at java.io.FileInputStream.\u003cinit\u003e(FileInputStream.java:138)\n  at showImage(\u003cconsole\u003e:28)\n  at $anonfun$showImages$1.apply(\u003cconsole\u003e:46)\n  at $anonfun$showImages$1.apply(\u003cconsole\u003e:46)\n  at scala.collection.immutable.List.map(List.scala:273)\n  at showImages(\u003cconsole\u003e:46)\n  ... 47 elided\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557596653796_979126680",
      "id": "20190511-174413_1204063644",
      "dateCreated": "2019-05-11 17:44:13.796",
      "dateStarted": "2019-05-26 10:59:49.505",
      "dateFinished": "2019-05-26 10:59:52.062",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nimport os\n\ncategory_map \u003d {\n    \u0027breaker_box\u0027: [],\n    \u0027sump_pump\u0027: [],\n    \u0027washer\u0027: []\n}\n\ncategory_to_idx \u003d {\n    \u0027breaker_box\u0027: 0,\n    \u0027sump_pump\u0027: 1,\n    \u0027washer\u0027: 2\n}\n\ndata_dir \u003d \u0027/data/household/images/\u0027\ncounter \u003d 0\nfor root, dirs, files in os.walk(data_dir):\n    category \u003d root.split(\"/\")[-1]\n    for f in files:\n        category_map[category].append({\n            \u0027idx\u0027: counter,\n            \u0027label\u0027: category_to_idx[category],\n            \u0027filename\u0027: files,\n            \u0027filepath\u0027: root + \u0027/\u0027 + f\n        })\n        counter +\u003d 1\n    \nfor k in category_map:\n    print(k, len(category_map[k]))",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:09:53.651",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "washer 161\nsump_pump 144\nbreaker_box 78\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557598631982_-1912712365",
      "id": "20190511-181711_1410267847",
      "dateCreated": "2019-05-11 18:17:11.982",
      "dateStarted": "2019-05-13 02:09:53.720",
      "dateFinished": "2019-05-13 02:09:53.789",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport random\nrandom.shuffle(category_map[\u0027breaker_box\u0027])\nrandom.shuffle(category_map[\u0027sump_pump\u0027])\nrandom.shuffle(category_map[\u0027washer\u0027])",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:09:56.234",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557709676210_-1776836279",
      "id": "20190513-010756_1446448544",
      "dateCreated": "2019-05-13 01:07:56.214",
      "dateStarted": "2019-05-13 02:09:56.297",
      "dateFinished": "2019-05-13 02:09:56.313",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\ndef write_lst(image_arr, base_dir, file_path):\n    with open(file_path, \u0027w\u0027) as f:\n        count \u003d 0\n        for img in image_arr:\n            label \u003d img[\u0027label\u0027]\n            img_path \u003d img[\u0027filepath\u0027]\n            new_line \u003d \u0027\\t\u0027.join([str(count), str(label), str(img_path)])\n            new_line +\u003d \u0027\\n\u0027\n            f.write(new_line)\n            count +\u003d 1",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:10.240",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557709762746_1154710085",
      "id": "20190513-010922_801713594",
      "dateCreated": "2019-05-13 01:09:22.746",
      "dateStarted": "2019-05-13 02:10:10.307",
      "dateFinished": "2019-05-13 02:10:10.328",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n# split data range\nmin_data_len \u003d min(len(category_map[\u0027breaker_box\u0027]), len(category_map[\u0027sump_pump\u0027]), len(category_map[\u0027washer\u0027]))\nsample \u003d (0,8)\ntrain \u003d (0, int(min_data_len * 0.7))\nvalidation \u003d (int(min_data_len * 0.7), int(min_data_len * 0.85))\ntest \u003d (int(min_data_len * 0.85), int(min_data_len * 1))\n\ndef split_dataset(from_idx, to_idx):\n    return category_map[\u0027breaker_box\u0027][from_idx: to_idx] + category_map[\u0027sump_pump\u0027][from_idx: to_idx] + category_map[\u0027washer\u0027][from_idx: to_idx]",
      "user": "anonymous",
      "dateUpdated": "2019-05-26 10:59:00.001",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-4115010917146581428.py\", line 307, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\nNameError: name \u0027category_map\u0027 is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-4115010917146581428.py\", line 319, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-4115010917146581428.py\", line 307, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\nNameError: name \u0027category_map\u0027 is not defined\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557709786620_-1272165421",
      "id": "20190513-010946_925370296",
      "dateCreated": "2019-05-13 01:09:46.620",
      "dateStarted": "2019-05-26 10:59:00.195",
      "dateFinished": "2019-05-26 10:59:00.242",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n# sample set is for developing model and debugging\n# because debugging with large dataset takes a long time\nsample_set \u003d split_dataset(sample[0], sample[1])\nwrite_lst(sample_set, \u0027./data/household\u0027, \u0027/data/household/sample/household.lst\u0027)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:14.591",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557709831387_-1912387369",
      "id": "20190513-011031_954906260",
      "dateCreated": "2019-05-13 01:10:31.387",
      "dateStarted": "2019-05-13 02:10:14.666",
      "dateFinished": "2019-05-13 02:10:14.683",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\ntrain_set \u003d split_dataset(train[0], train[1])\nwrite_lst(train_set, \u0027/data/household\u0027, \u0027/data/household/train/household.lst\u0027)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:21.563",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557709957611_-1371532708",
      "id": "20190513-011237_1278084558",
      "dateCreated": "2019-05-13 01:12:37.611",
      "dateStarted": "2019-05-13 02:10:21.620",
      "dateFinished": "2019-05-13 02:10:21.641",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nvalidation_set \u003d split_dataset(validation[0], validation[1])\nwrite_lst(validation_set, \u0027/data/household\u0027, \u0027/data/household/validation/household.lst\u0027)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:23.380",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557710017555_-1837987750",
      "id": "20190513-011337_395802822",
      "dateCreated": "2019-05-13 01:13:37.556",
      "dateStarted": "2019-05-13 02:10:23.441",
      "dateFinished": "2019-05-13 02:10:23.460",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\ntest_set \u003d split_dataset(test[0], test[1])\nwrite_lst(validation_set, \u0027/data/household\u0027, \u0027/data/household/test/household.lst\u0027)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:25.168",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557710032934_-1037187321",
      "id": "20190513-011352_276585301",
      "dateCreated": "2019-05-13 01:13:52.934",
      "dateStarted": "2019-05-13 02:10:25.218",
      "dateFinished": "2019-05-13 02:10:25.237",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nfrom mxnet.gluon.model_zoo.vision import mobilenet1_0",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:42.027",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557710075872_-1864628075",
      "id": "20190513-011435_1157507771",
      "dateCreated": "2019-05-13 01:14:35.872",
      "dateStarted": "2019-05-13 02:10:42.083",
      "dateFinished": "2019-05-13 02:10:43.149",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\npretrained_net \u003d mobilenet1_0(pretrained\u003dTrue)\nprint(pretrained_net)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:44.094",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Downloading /root/.mxnet/models/mobilenet1.0-6b8c5106.zip from https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/models/mobilenet1.0-6b8c5106.zip...\nMobileNet(\n  (output): Dense(1024 -\u003e 1000, linear)\n  (features): HybridSequential(\n    (0): Conv2D(3 -\u003e 32, kernel_size\u003d(3, 3), stride\u003d(2, 2), padding\u003d(1, 1), bias\u003dFalse)\n    (1): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d32)\n    (2): Activation(relu)\n    (3): Conv2D(1 -\u003e 32, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d32, bias\u003dFalse)\n    (4): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d32)\n    (5): Activation(relu)\n    (6): Conv2D(32 -\u003e 64, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (7): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d64)\n    (8): Activation(relu)\n    (9): Conv2D(1 -\u003e 64, kernel_size\u003d(3, 3), stride\u003d(2, 2), padding\u003d(1, 1), groups\u003d64, bias\u003dFalse)\n    (10): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d64)\n    (11): Activation(relu)\n    (12): Conv2D(64 -\u003e 128, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (13): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d128)\n    (14): Activation(relu)\n    (15): Conv2D(1 -\u003e 128, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d128, bias\u003dFalse)\n    (16): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d128)\n    (17): Activation(relu)\n    (18): Conv2D(128 -\u003e 128, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (19): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d128)\n    (20): Activation(relu)\n    (21): Conv2D(1 -\u003e 128, kernel_size\u003d(3, 3), stride\u003d(2, 2), padding\u003d(1, 1), groups\u003d128, bias\u003dFalse)\n    (22): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d128)\n    (23): Activation(relu)\n    (24): Conv2D(128 -\u003e 256, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (25): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d256)\n    (26): Activation(relu)\n    (27): Conv2D(1 -\u003e 256, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d256, bias\u003dFalse)\n    (28): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d256)\n    (29): Activation(relu)\n    (30): Conv2D(256 -\u003e 256, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (31): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d256)\n    (32): Activation(relu)\n    (33): Conv2D(1 -\u003e 256, kernel_size\u003d(3, 3), stride\u003d(2, 2), padding\u003d(1, 1), groups\u003d256, bias\u003dFalse)\n    (34): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d256)\n    (35): Activation(relu)\n    (36): Conv2D(256 -\u003e 512, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (37): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (38): Activation(relu)\n    (39): Conv2D(1 -\u003e 512, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d512, bias\u003dFalse)\n    (40): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (41): Activation(relu)\n    (42): Conv2D(512 -\u003e 512, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (43): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (44): Activation(relu)\n    (45): Conv2D(1 -\u003e 512, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d512, bias\u003dFalse)\n    (46): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (47): Activation(relu)\n    (48): Conv2D(512 -\u003e 512, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (49): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (50): Activation(relu)\n    (51): Conv2D(1 -\u003e 512, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d512, bias\u003dFalse)\n    (52): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (53): Activation(relu)\n    (54): Conv2D(512 -\u003e 512, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (55): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (56): Activation(relu)\n    (57): Conv2D(1 -\u003e 512, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d512, bias\u003dFalse)\n    (58): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (59): Activation(relu)\n    (60): Conv2D(512 -\u003e 512, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (61): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (62): Activation(relu)\n    (63): Conv2D(1 -\u003e 512, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d512, bias\u003dFalse)\n    (64): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (65): Activation(relu)\n    (66): Conv2D(512 -\u003e 512, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (67): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (68): Activation(relu)\n    (69): Conv2D(1 -\u003e 512, kernel_size\u003d(3, 3), stride\u003d(2, 2), padding\u003d(1, 1), groups\u003d512, bias\u003dFalse)\n    (70): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d512)\n    (71): Activation(relu)\n    (72): Conv2D(512 -\u003e 1024, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (73): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d1024)\n    (74): Activation(relu)\n    (75): Conv2D(1 -\u003e 1024, kernel_size\u003d(3, 3), stride\u003d(1, 1), padding\u003d(1, 1), groups\u003d1024, bias\u003dFalse)\n    (76): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d1024)\n    (77): Activation(relu)\n    (78): Conv2D(1024 -\u003e 1024, kernel_size\u003d(1, 1), stride\u003d(1, 1), bias\u003dFalse)\n    (79): BatchNorm(use_global_stats\u003dFalse, momentum\u003d0.9, axis\u003d1, fix_gamma\u003dFalse, eps\u003d1e-05, in_channels\u003d1024)\n    (80): Activation(relu)\n    (81): GlobalAvgPool2D(size\u003d(1, 1), stride\u003d(1, 1), padding\u003d(0, 0), ceil_mode\u003dTrue)\n    (82): Flatten\n  )\n)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557710087690_1894626171",
      "id": "20190513-011447_416794406",
      "dateCreated": "2019-05-13 01:14:47.691",
      "dateStarted": "2019-05-13 02:10:44.154",
      "dateFinished": "2019-05-13 02:10:46.915",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nnet \u003d mobilenet1_0(classes\u003d3)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:48.905",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557710096585_-32026860",
      "id": "20190513-011456_184704299",
      "dateCreated": "2019-05-13 01:14:56.585",
      "dateStarted": "2019-05-13 02:10:48.959",
      "dateFinished": "2019-05-13 02:10:48.996",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nfrom mxnet import init\nnet.features \u003d pretrained_net.features\nnet.output.initialize(init.Xavier())",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:52.839",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557710108513_-750819841",
      "id": "20190513-011508_339204879",
      "dateCreated": "2019-05-13 01:15:08.513",
      "dateStarted": "2019-05-13 02:10:52.893",
      "dateFinished": "2019-05-13 02:10:52.909",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nfrom mxnet.image import color_normalize\nfrom mxnet import image\n\ntrain_augs \u003d [\n    image.HorizontalFlipAug(0.5),\n    image.BrightnessJitterAug(.3),\n    image.HueJitterAug(.1)\n]\ntest_augs \u003d [\n    image.ResizeAug(224),\n    image.CenterCropAug((224, 224))\n]\n\n\ndef transform(data, label, augs):\n    data \u003d data.astype(\u0027float32\u0027)\n    for aug in augs:\n        data \u003d aug(data)\n    data \u003d nd.transpose(data, (2,0,1))\n    return data, nd.array([label]).asscalar().astype(\u0027float32\u0027)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:54.656",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557710118388_1091472060",
      "id": "20190513-011518_1702845743",
      "dateCreated": "2019-05-13 01:15:18.388",
      "dateStarted": "2019-05-13 02:10:54.712",
      "dateFinished": "2019-05-13 02:10:54.724",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\ncurl -o im2rec.py https://raw.githubusercontent.com/garysieling/transfer-learning-with-gluon/master/im2rec.py\npython3 im2rec.py /data/household/train /data/household/images/ --center-crop True --resize 224 --pack-label True --recursive True\npython3 im2rec.py /data/household/validation /data/household/images/ --center-crop True --resize 224 --pack-label True --recursive True\npython3 im2rec.py /data/household/test /data/household/images/ --center-crop True --resize 224 --pack-label True --recursive True\npython3 im2rec.py /data/household/sample /data/household/images/ --center-crop True --resize 224 --pack-label True --recursive True\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:10:57.906",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100 13811  100 13811    0     0  48966      0 --:--:-- --:--:-- --:--:-- 49149\nCreating .rec file from /data/household/train/household.lst in /data/household/train\nmultiprocessing not available, fall back to single threaded encoding\ntime: 0.028142690658569336  count: 0\nCreating .rec file from /data/household/validation/household.lst in /data/household/validation\nmultiprocessing not available, fall back to single threaded encoding\ntime: 0.0214846134185791  count: 0\nCreating .rec file from /data/household/test/household.lst in /data/household/test\nmultiprocessing not available, fall back to single threaded encoding\ntime: 0.01837635040283203  count: 0\nCreating .rec file from /data/household/sample/household.lst in /data/household/sample\nmultiprocessing not available, fall back to single threaded encoding\ntime: 0.025671005249023438  count: 0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557710725689_1470757423",
      "id": "20190513-012525_503302828",
      "dateCreated": "2019-05-13 01:25:25.689",
      "dateStarted": "2019-05-13 02:10:57.950",
      "dateFinished": "2019-05-13 02:11:07.618",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nfrom mxnet.gluon.data.vision import ImageRecordDataset\n\ntrain_rec \u003d \u0027/data/household/train/household.rec\u0027\nvalidation_rec \u003d \u0027/data/household/validation/household.rec\u0027\ntest_rec \u003d \u0027/data/household/test/household.rec\u0027\nsample_rec \u003d \u0027/data/household/sample/household.rec\u0027\n\ntrainIterator \u003d ImageRecordDataset(\n    filename\u003dtrain_rec, \n    transform\u003dlambda X, y: transform(X, y, train_augs)\n)\nvalidationIterator \u003d ImageRecordDataset(\n    filename\u003dvalidation_rec,\n    transform\u003dlambda X, y: transform(X, y, test_augs)\n)\ntestIterator \u003d ImageRecordDataset(\n    filename\u003dtest_rec,\n    transform\u003dlambda X, y: transform(X, y, test_augs)\n)\nsampleIterator \u003d ImageRecordDataset(\n    filename\u003dsample_rec,\n    transform\u003dlambda X, y: transform(X, y, test_augs)\n)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:11:17.459",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557710129213_1387267233",
      "id": "20190513-011529_1743559970",
      "dateCreated": "2019-05-13 01:15:29.213",
      "dateStarted": "2019-05-13 02:11:17.515",
      "dateFinished": "2019-05-13 02:11:17.560",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport matplotlib.pyplot as plt\nfrom mxnet import nd\n%matplotlib inline\n\ndef show_images(imgs, nrows, ncols, figsize\u003dNone):\n    \"\"\"plot a list of images\"\"\"\n    if not figsize:\n        figsize \u003d (ncols, nrows)\n    _, figs \u003d plt.subplots(nrows, ncols, figsize\u003dfigsize)\n    for i in range(nrows):\n        for j in range(ncols):\n            figs[i][j].imshow(imgs[i*ncols+j].asnumpy())\n            figs[i][j].axes.get_xaxis().set_visible(False)\n            figs[i][j].axes.get_yaxis().set_visible(False)\n    plt.show()",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:11:33.734",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-4910710286064764933.py\", line 295, in \u003cmodule\u003e\n    code \u003d compile(\u0027\\n\u0027.join(final_code), \u0027\u003cstdin\u003e\u0027, \u0027exec\u0027, ast.PyCF_ONLY_AST, 1)\n  File \"\u003cstdin\u003e\", line 3\n    %matplotlib inline\n    ^\nSyntaxError: invalid syntax\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557710620828_-216032758",
      "id": "20190513-012340_952595436",
      "dateCreated": "2019-05-13 01:23:40.828",
      "dateStarted": "2019-05-13 02:11:33.818",
      "dateFinished": "2019-05-13 02:11:33.831",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nfrom mxnet import gluon\nsample_data \u003d gluon.data.DataLoader(sampleIterator, 16, shuffle\u003dTrue)\nimport mxnet\nfor i, (data, label) in enumerate(sample_data):\n    img_data \u003d data.transpose((0,2,3,1)).clip(0,255)/255\n    show_images(img_data, 4, 4)\n    data_normalised \u003d color_normalize(data/255,\n                           mean\u003dmxnet.nd.array([0.485, 0.456, 0.406]).reshape((1,3,1,1)),\n                           std\u003dmxnet.nd.array([0.229, 0.224, 0.225]).reshape((1,3,1,1)))\n    print(label)\n    break",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:11:42.924",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-4910710286064764933.py\", line 312, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 4, in \u003cmodule\u003e\n  File \"/usr/local/lib/python3.5/dist-packages/mxnet/gluon/data/dataloader.py\", line 563, in same_process_iter\n    ret \u003d self._batchify_fn([self._dataset[idx] for idx in batch])\n  File \"/usr/local/lib/python3.5/dist-packages/mxnet/gluon/data/dataloader.py\", line 563, in \u003clistcomp\u003e\n    ret \u003d self._batchify_fn([self._dataset[idx] for idx in batch])\n  File \"/usr/local/lib/python3.5/dist-packages/mxnet/gluon/data/vision/datasets.py\", line 254, in __getitem__\n    return self._transform(image.imdecode(img, self._flag), header.label)\n  File \"\u003cstdin\u003e\", line 20, in \u003clambda\u003e\n  File \"\u003cstdin\u003e\", line 16, in transform\nNameError: name \u0027nd\u0027 is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-4910710286064764933.py\", line 319, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-4910710286064764933.py\", line 312, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 4, in \u003cmodule\u003e\n  File \"/usr/local/lib/python3.5/dist-packages/mxnet/gluon/data/dataloader.py\", line 563, in same_process_iter\n    ret \u003d self._batchify_fn([self._dataset[idx] for idx in batch])\n  File \"/usr/local/lib/python3.5/dist-packages/mxnet/gluon/data/dataloader.py\", line 563, in \u003clistcomp\u003e\n    ret \u003d self._batchify_fn([self._dataset[idx] for idx in batch])\n  File \"/usr/local/lib/python3.5/dist-packages/mxnet/gluon/data/vision/datasets.py\", line 254, in __getitem__\n    return self._transform(image.imdecode(img, self._flag), header.label)\n  File \"\u003cstdin\u003e\", line 20, in \u003clambda\u003e\n  File \"\u003cstdin\u003e\", line 16, in transform\nNameError: name \u0027nd\u0027 is not defined\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557713493734_405701211",
      "id": "20190513-021133_1651293912",
      "dateCreated": "2019-05-13 02:11:33.735",
      "dateStarted": "2019-05-13 02:11:43.004",
      "dateFinished": "2019-05-13 02:11:43.048",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport time\nfrom mxnet.image import color_normalize\nfrom mxnet import autograd\nimport mxnet as mx\nfrom mxnet import nd\n\ndef evaluate_accuracy(data_iterator, net):\n    acc \u003d mx.metric.Accuracy()\n    for i, (data, label) in enumerate(data_iterator):\n        data \u003d data.as_in_context(ctx)\n        label \u003d label.as_in_context(ctx)\n        data \u003d color_normalize(data/255,\n                               mean\u003dmx.nd.array([0.485, 0.456, 0.406]).reshape((1,3,1,1)),\n                               std\u003dmx.nd.array([0.229, 0.224, 0.225]).reshape((1,3,1,1)))\n        output \u003d net(data)\n        prediction \u003d nd.argmax(output, axis\u003d1)\n        acc.update(preds\u003dprediction, labels\u003dlabel)\n    return acc.get()[1]\n\ndef metric_str(names, accs):\n    return \u0027, \u0027.join([\u0027%s\u003d%f\u0027%(name, acc) for name, acc in zip(names, accs)])\n\ndef train_util(net, train_iter, validation_iter, loss_fn, trainer, ctx, epochs, batch_size):\n    metric \u003d mx.metric.create([\u0027acc\u0027])\n    for epoch in range(epochs):\n        for i, (data, label) in enumerate(train_iter):\n            st \u003d time.time()\n            # ensure context            \n            data \u003d data.as_in_context(ctx)\n            label \u003d label.as_in_context(ctx)\n            # normalize images\n            data \u003d color_normalize(data/255,\n                                   mean\u003dmx.nd.array([0.485, 0.456, 0.406]).reshape((1,3,1,1)),\n                                   std\u003dmx.nd.array([0.229, 0.224, 0.225]).reshape((1,3,1,1)))\n            \n            with autograd.record():\n                output \u003d net(data)\n                loss \u003d loss_fn(output, label)\n\n            loss.backward()\n            trainer.step(data.shape[0])\n            \n            #  Keep a moving average of the losses\n            metric.update([label], [output])\n            names, accs \u003d metric.get()\n            # print(\u0027[Epoch %d Batch %d] speed: %f samples/s, training: %s\u0027%(epoch, i, batch_size/(time.time()-st), metric_str(names, accs)))\n            if i%100 \u003d\u003d 0:\n                net.collect_params().save(\u0027/data/checkpoints/%d-%d.params\u0027%(epoch, i))\n\n        train_acc \u003d evaluate_accuracy(train_iter, net)\n        validation_acc \u003d evaluate_accuracy(validation_iter, net)\n        print(\"Epoch %s | training_acc %s | val_acc %s \" % (epoch, train_acc, validation_acc))\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:12:55.538",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1557713502924_997730683",
      "id": "20190513-021142_2114465842",
      "dateCreated": "2019-05-13 02:11:42.924",
      "dateStarted": "2019-05-13 02:12:55.682",
      "dateFinished": "2019-05-13 02:12:55.727",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\ndef train(net, ctx, \n          batch_size\u003d64, epochs\u003d10, learning_rate\u003d0.01, wd\u003d0.001):\n    train_data \u003d gluon.data.DataLoader(\n        trainIterator, batch_size, shuffle\u003dTrue)\n    validation_data \u003d gluon.data.DataLoader(\n        validationIterator, batch_size)\n\n    net.collect_params().reset_ctx(ctx)\n    net.hybridize()\n    \n    loss \u003d gluon.loss.SoftmaxCrossEntropyLoss()\n    trainer \u003d gluon.Trainer(net.collect_params(), \u0027sgd\u0027, {\n        \u0027learning_rate\u0027: learning_rate, \u0027wd\u0027: wd})\n    \n    train_util(net, train_data, validation_data, \n               loss, trainer, ctx, epochs, batch_size)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:12:57.661",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1557713513658_64521483",
      "id": "20190513-021153_891731971",
      "dateCreated": "2019-05-13 02:11:53.658",
      "dateStarted": "2019-05-13 02:12:57.762",
      "dateFinished": "2019-05-13 02:12:57.777",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport mxnet as mx\nctx \u003d mx.cpu()\ntrain(net, ctx, batch_size\u003d64, epochs\u003d5, learning_rate\u003d0.003)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:13:19.759",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Epoch 0 | training_acc 0.7716049382716049 | val_acc 0.6666666666666666 \nEpoch 1 | training_acc 0.8827160493827161 | val_acc 0.8333333333333334 \nEpoch 2 | training_acc 0.9444444444444444 | val_acc 0.9722222222222222 \nEpoch 3 | training_acc 0.9938271604938271 | val_acc 0.9722222222222222 \nEpoch 4 | training_acc 1.0 | val_acc 1.0 \n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557713524465_1529343214",
      "id": "20190513-021204_1439275136",
      "dateCreated": "2019-05-13 02:12:04.465",
      "dateStarted": "2019-05-13 02:13:19.999",
      "dateFinished": "2019-05-13 02:18:24.441",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\ntest_data_loader \u003d gluon.data.DataLoader(testIterator, 64)\ntest_acc \u003d evaluate_accuracy(test_data_loader, net)\nprint(test_acc)",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:18:31.606",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557713531389_-1862617499",
      "id": "20190513-021211_1741336815",
      "dateCreated": "2019-05-13 02:12:11.389",
      "dateStarted": "2019-05-13 02:18:31.872",
      "dateFinished": "2019-05-13 02:18:34.639",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef predict_husky_akita(net, fname):\n    with open(fname, \u0027rb\u0027) as f:\n        img \u003d image.imdecode(f.read())\n    data, _ \u003d transform(img, -1, test_augs)\n    plt.imshow(data.transpose((1,2,0)).asnumpy()/255)\n    data \u003d data.expand_dims(axis\u003d0)\n    data \u003d color_normalize(data/255,\n                           mean\u003dnd.array([0.485, 0.456, 0.406]).reshape((1,3,1,1)),\n                           std\u003dnd.array([0.229, 0.224, 0.225]).reshape((1,3,1,1)))\n    out \u003d net(data.as_in_context(mxnet.cpu()))\n    plt.imshow(img.asnumpy())\n    pred, label \u003d get_label_and_prod(out)\n    print(\u0027Pred: %s\u0027% label)\n\ndef get_label_and_prod(out):\n    labels \u003d [\u0027husky\u0027, \u0027akita\u0027]\n    pred \u003d int(nd.argmax(out, axis\u003d1).asscalar())\n    return pred, labels[pred]",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:18:38.655",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-4910710286064764933.py\", line 295, in \u003cmodule\u003e\n    code \u003d compile(\u0027\\n\u0027.join(final_code), \u0027\u003cstdin\u003e\u0027, \u0027exec\u0027, ast.PyCF_ONLY_AST, 1)\n  File \"\u003cstdin\u003e\", line 2\n    %matplotlib inline\n    ^\nSyntaxError: invalid syntax\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1557713557360_285899355",
      "id": "20190513-021237_224414957",
      "dateCreated": "2019-05-13 02:12:37.364",
      "dateStarted": "2019-05-13 02:18:38.956",
      "dateFinished": "2019-05-13 02:18:38.994",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-13 02:18:38.659",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1557713918655_-1878130903",
      "id": "20190513-021838_1396320701",
      "dateCreated": "2019-05-13 02:18:38.656",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Demo",
  "id": "2ED2VTNRX",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "python:shared_process": [],
    "sh:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}